service: fileflow

plugins:
  - serverless-plugin-typescript
  - serverless-step-functions

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  memorySize: 128

  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:CopyObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:HeadObject
      Resource:
        - !GetAtt SourceBucket.Arn
        - !Join [ "/", [!GetAtt SourceBucket.Arn, "*" ] ]
        - !GetAtt ArchiveBucket.Arn
        - !Join [ "/", [!GetAtt ArchiveBucket.Arn, "*" ] ]
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource:
        - !Ref IngestionTopic

  environment:
    SOURCEBUCKET: !Ref SourceBucket
    ARCHIVEBUCKET: !Ref ArchiveBucket
    FFTOPIC: !Ref IngestionTopic
    IDLQ: !Ref IngestionDLQueue 

functions:
  # for each put file event in source bucket, invoke step functions with file prefix/key and lambda arn from SSM
  # if no lambda is specified in SSM, send to DLQ, maybe send SNS message
  FlowRunner:
    handler: src/lambdas/FlowRunner.handler
    role: !GetAtt FlowRunnerRole.Arn
    reservedConcurrency: 1
    events:
      - sqs:
          batchSize: 10
          arn: !GetAtt IngestionQueue.Arn
    environment:
      FFSM: !Ref FileFlowStepFunc

  
  # verify file exists with headObject, verify lambda exists with getFunction
  VerifyInput:
    handler: src/lambdas/sfn/VerifyInput.handler
  
  # invoke Lambda with file prefix/key and wait for task token
  CallLambda:
    handler: src/lambdas/sfn/CallLambda.handler
    role: !GetAtt CallLambdaRole.Arn
  
  # publish to SNS that file completed, copy file to archive with same prefix/key + date suffix and delete from source 
  MoveSourceFile:
    handler: src/lambdas/sfn/MoveSourceFile.handler

  # test function
  ReadFile:
    handler: src/lambdas/ReadFile.handler
    role: !GetAtt ReadFileRole.Arn

  # fails 50% of the time
  CoinFlip:
    handler: src/lambdas/CoinFlip.handler
    role: !GetAtt ReadFileRole.Arn

stepFunctions:
  stateMachines:
    FileFlowStepFunc:
      id: FileFlowStepFunc
      name: ${self:service}-${self:provider.stage}-fileflowstepfunction
      definition:
        StartAt: verifyInput
        States:
          verifyInput:
            Type: Task
            Resource: !GetAtt VerifyInput.Arn
            Next: callLambda
          callLambda:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken 
            TimeoutSeconds: 15
            Parameters:
              FunctionName: !GetAtt CallLambda.Arn
              InvocationType: Event
              Payload:
                input.$: "$"
                token.$: "$$.Task.Token"
            Next: callLambdaSuccess
            ResultPath: $.result
            Catch: 
              - ErrorEquals: ["States.ALL"]
                Next: callLambdaFailure
                ResultPath: $.error
          callLambdaSuccess:
            Type: Parallel
            End: true
            Branches:
              - StartAt: moveSourceFile
                States:
                  moveSourceFile:
                    Type: Task
                    Resource: !GetAtt MoveSourceFile.Arn
                    ResultPath: $.move
                    End: true
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        IntervalSeconds: 5
                        MaxAttempts: 1
              - StartAt: fileSuccess
                States:
                  fileSuccess:
                    Type: Task
                    Resource: arn:aws:states:::sns:publish
                    Parameters:
                      TopicArn: !Ref IngestionTopic
                      Message.$: States.Format('{}/{} was successfully processed using {}.', $.prefix, $.key, $.arn)
                      Subject.$: States.Format('FileFlow Success, {}/{}', $.prefix, $.key)
                      MessageAttributes:
                        prefix:
                          DataType: String
                          StringValue.$: $.prefix
                    End: true

          callLambdaFailure:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: !Ref IngestionTopic
              Message.$: $.error
              Subject.$: States.Format('FileFlow Failure, {}/{}', $.prefix, $.key)
              MessageAttributes:
                prefix:
                  DataType: String
                  StringValue.$: $.prefix
            End: true
          
resources:
  - ${file(./cfn_resources/iam_roles.yaml)}
  - ${file(./cfn_resources/sqs_resources.yaml)}
  - Resources:
      # send put file event to IngestionQueue, move files to ArchiveBucket when finished
      SourceBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:service}-${self:provider.stage}-sourcebucket
          NotificationConfiguration:
            QueueConfigurations:
              - Event: s3:ObjectCreated:*
                Queue: !GetAtt IngestionQueue.Arn
  
      # store ingested files in here
      ArchiveBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:service}-${self:provider.stage}-archivebucket

      # send notifications with file prefix/key as parameter
      IngestionTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: ${self:service}-${self:provider.stage}-ingestiontopic
  